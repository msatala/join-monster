{"version":3,"sources":["../src/alias-namespace.js"],"names":["AliasNamespace","constructor","minify","mininym","G","baseNAll","usedTableAliases","Set","columnAssignments","generate","type","name","next","value","join","replace","slice","has","add"],"mappings":";;;;;;;AAAA;;;;AAEA;AACA;AACe,MAAMA,cAAN,CAAqB;AAClCC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKA,MAAL,GAAc,CAAC,CAACA,MAAhB,CADkB,CAGlB;AACA;;AACA,SAAKC,OAAL,GAAeC,sBAAEC,QAAF,CACb,wDADa,CAAf,CALkB,CASlB;;AACA,SAAKC,gBAAL,GAAwB,IAAIC,GAAJ,EAAxB,CAVkB,CAYlB;AACA;;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACD;;AAEDC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,IAAP,EAAa;AACnB;AACA,QAAI,KAAKT,MAAT,EAAiB;AACf;AACA,UAAIQ,IAAI,KAAK,OAAb,EAAsB;AACpB,eAAO,KAAKP,OAAL,CAAaS,IAAb,GAAoBC,KAApB,CAA0BC,IAA1B,CAA+B,EAA/B,CAAP;AACD,OAJc,CAMf;AACA;;;AACA,UAAI,CAAC,KAAKN,iBAAL,CAAuBG,IAAvB,CAAL,EAAmC;AACjC,aAAKH,iBAAL,CAAuBG,IAAvB,IAA+B,KAAKR,OAAL,CAAaS,IAAb,GAAoBC,KAApB,CAA0BC,IAA1B,CAA+B,EAA/B,CAA/B;AACD;;AAED,aAAO,KAAKN,iBAAL,CAAuBG,IAAvB,CAAP;AACD,KAfkB,CAiBnB;;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACrB,aAAOC,IAAP;AACD;;AAEDA,IAAAA,IAAI,GAAGA,IAAI,CACRI,OADI,CACI,MADJ,EACY,EADZ,EAEJA,OAFI,CAEI,eAFJ,EAEqB,GAFrB,EAGJC,KAHI,CAGE,CAHF,EAGK,EAHL,CAAP,CAtBmB,CA0BnB;AACA;;AACA,WAAO,KAAKV,gBAAL,CAAsBW,GAAtB,CAA0BN,IAA1B,CAAP,EAAwC;AACtCA,MAAAA,IAAI,IAAI,GAAR;AACD;;AACD,SAAKL,gBAAL,CAAsBY,GAAtB,CAA0BP,IAA1B;AACA,WAAOA,IAAP;AACD;;AAnDiC","sourcesContent":["import G from 'generatorics'\n\n// this class is responsible for generating the aliases that appear in each SQL query\n// this has different rules depending on whether we are aliasing a column or table and on whether we are minifying\nexport default class AliasNamespace {\n  constructor(minify) {\n    this.minify = !!minify\n\n    // a generator for infinite alias names, starting with the shortest possible\n    // this is helpful for generating the names when minifying\n    this.mininym = G.baseNAll(\n      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ#$'\n    )\n\n    // keep track of all the table names we've used since these have to be unique in each query\n    this.usedTableAliases = new Set()\n\n    // we can re-use aliases for columns since columns names dont need to be globally unique because they will be prefixed\n    // this object will remember alias assignments for each column name so we can reuse them\n    this.columnAssignments = {}\n  }\n\n  generate(type, name) {\n    // if minifiying, make everything ugly and unique.\n    if (this.minify) {\n      // tables definitely all need unique names\n      if (type === 'table') {\n        return this.mininym.next().value.join('')\n      }\n\n      // but if its a column, we dont need to worry about the uniqueness from other columns\n      // because the columns will get prefixed with the parent(s)\n      if (!this.columnAssignments[name]) {\n        this.columnAssignments[name] = this.mininym.next().value.join('')\n      }\n\n      return this.columnAssignments[name]\n    }\n\n    // otherwise, lets make it readable\n    if (type === 'column') {\n      return name\n    }\n\n    name = name\n      .replace(/\\s+/g, '')\n      .replace(/[^a-zA-Z0-9]/g, '_')\n      .slice(0, 10)\n    // the table aliases must be unique\n    // just append a \"$\" until its a unique name\n    while (this.usedTableAliases.has(name)) {\n      name += '$'\n    }\n    this.usedTableAliases.add(name)\n    return name\n  }\n}\n"],"file":"alias-namespace.js"}