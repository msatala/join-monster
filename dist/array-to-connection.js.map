{"version":3,"sources":["../src/array-to-connection.js"],"names":["arrToConnection","data","sqlAST","astChild","children","Array","isArray","dataItem","recurseOnObjInData","typedChildren","astType","Object","prototype","hasOwnProperty","call","pageInfo","hasNextPage","hasPreviousPage","paginate","edges","_paginated","sortKey","junction","args","first","length","pop","last","reverse","map","obj","cursor","key","column","node","startCursor","endCursor","orderBy","offset","after","arrayLength","parseInt","$total","connection","sliceStart","total","dataObj","dataChild","fieldName"],"mappings":"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","sourcesContent":["import { connectionFromArraySlice, cursorToOffset } from 'graphql-relay'\nimport { objToCursor, wrap, last } from './util'\nimport idx from 'idx'\n\n// a function for data manipulation AFTER its nested.\n// this is only necessary when using the SQL pagination\n// we have to interpret the slice that comes back and generate the Connection Object type\nfunction arrToConnection(data, sqlAST) {\n  // use \"post-order\" tree traversal\n  for (let astChild of sqlAST.children || []) {\n    if (Array.isArray(data)) {\n      for (let dataItem of data) {\n        recurseOnObjInData(dataItem, astChild)\n      }\n    } else if (data) {\n      recurseOnObjInData(data, astChild)\n    }\n  }\n  if (sqlAST.typedChildren) {\n    for (let astType in sqlAST.typedChildren) {\n      if (Object.prototype.hasOwnProperty.call(sqlAST.typedChildren, astType)) {\n        for (let astChild of sqlAST.typedChildren[astType] || []) {\n          if (Array.isArray(data)) {\n            for (let dataItem of data) {\n              recurseOnObjInData(dataItem, astChild)\n            }\n          } else if (data) {\n            recurseOnObjInData(data, astChild)\n          }\n        }\n      }\n    }\n  }\n  const pageInfo = {\n    hasNextPage: false,\n    hasPreviousPage: false\n  }\n  if (!data) {\n    if (sqlAST.paginate) {\n      return {\n        pageInfo,\n        edges: []\n      }\n    }\n    return null\n  }\n  // is cases where pagination was done, take the data and convert to the connection object\n  // if any two fields happen to become a reference to the same object (when their `uniqueKey`s are the same),\n  // we must prevent the recursive processing from visting the same object twice, because mutating the object the first\n  // time changes it everywhere. we'll set the `_paginated` property to true to prevent this\n  if (sqlAST.paginate && !data._paginated) {\n    if (sqlAST.sortKey || idx(sqlAST, _ => _.junction.sortKey)) {\n      if (idx(sqlAST, _ => _.args.first)) {\n        // we fetched an extra one in order to determine if there is a next page, if there is one, pop off that extra\n        if (data.length > sqlAST.args.first) {\n          pageInfo.hasNextPage = true\n          data.pop()\n        }\n      } else if (sqlAST.args && sqlAST.args.last) {\n        // if backward paging, do the same, but also reverse it\n        if (data.length > sqlAST.args.last) {\n          pageInfo.hasPreviousPage = true\n          data.pop()\n        }\n        data.reverse()\n      }\n      // convert nodes to edges and compute the cursor for each\n      // TODO: only compute all the cursor if asked for them\n      const sortKey = sqlAST.sortKey || sqlAST.junction.sortKey\n      const edges = data.map(obj => {\n        const cursor = {}\n        const key = sortKey.key\n        for (let column of wrap(key)) {\n          cursor[column] = obj[column]\n        }\n        return { cursor: objToCursor(cursor), node: obj }\n      })\n      if (data.length) {\n        pageInfo.startCursor = edges[0].cursor\n        pageInfo.endCursor = last(edges).cursor\n      }\n      return { edges, pageInfo, _paginated: true }\n    }\n    if (sqlAST.orderBy || (sqlAST.junction && sqlAST.junction.orderBy)) {\n      let offset = 0\n      if (idx(sqlAST, _ => _.args.after)) {\n        offset = cursorToOffset(sqlAST.args.after) + 1\n      }\n      // $total was a special column for determining the total number of items\n      const arrayLength = data[0] && parseInt(data[0].$total, 10)\n      const connection = connectionFromArraySlice(data, sqlAST.args || {}, {\n        sliceStart: offset,\n        arrayLength\n      })\n      connection.total = arrayLength || 0\n      connection._paginated = true\n      return connection\n    }\n  }\n  return data\n}\n\nexport default arrToConnection\n\nfunction recurseOnObjInData(dataObj, astChild) {\n  const dataChild = dataObj[astChild.fieldName]\n  if (dataChild) {\n    dataObj[astChild.fieldName] = arrToConnection(\n      dataObj[astChild.fieldName],\n      astChild\n    )\n  }\n}\n"],"file":"array-to-connection.js"}