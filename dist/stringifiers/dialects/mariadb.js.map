{"version":3,"sources":["../../../src/stringifiers/dialects/mariadb.js"],"names":["quote","str","joinUnions","unions","as","join","paginatedSelect","table","whereConditions","order","limit","offset","opts","extraJoin","withTotal","name","condition","columns","dialect","module","exports","require","compositeKey","parent","keys","map","key","handlePaginationAtRoot","node","context","tables","pagingWhereConditions","sortKey","whereCondition","whereAddendum","push","where","args","q","orderBy","handleBatchedOneToManyPaginated","batchScope","val","sqlBatch","thisKey","handleBatchedManyToManyPaginated","joinCondition","junction","sqlTable"],"mappings":"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","sourcesContent":["import {\n  keysetPagingSelect,\n  offsetPagingSelect,\n  interpretForOffsetPaging,\n  interpretForKeysetPaging,\n  orderColumnsToString\n} from '../shared'\n\nimport { filter } from 'lodash'\n\nfunction quote(str) {\n  return `\\`${str}\\``\n}\n\nfunction joinUnions(unions, as) {\n  return `FROM (\n${unions.join('\\nUNION\\n')}\n) AS ${quote(as)}`\n}\n\nfunction paginatedSelect(\n  table,\n  as,\n  whereConditions,\n  order,\n  limit,\n  offset,\n  opts = {}\n) {\n  const { extraJoin, withTotal } = opts\n  as = quote(as)\n  return `\\\n  (SELECT ${as}.*${withTotal ? ', count(*) OVER () AS `$total`' : ''}\n  FROM ${table} ${as}\n  ${\n    extraJoin\n      ? `LEFT JOIN ${extraJoin.name} ${quote(extraJoin.as)}\n    ON ${extraJoin.condition}`\n      : ''\n  }\n  WHERE ${whereConditions}\n  ORDER BY ${orderColumnsToString(order.columns, quote, order.table)}\n  LIMIT ${limit}${offset ? ' OFFSET ' + offset : ''})`\n}\n\nconst dialect = (module.exports = {\n  ...require('./mixins/pagination-not-supported'),\n\n  name: 'mariadb',\n\n  quote,\n\n  compositeKey(parent, keys) {\n    keys = keys.map(key => `${quote(parent)}.${quote(key)}`)\n    return `CONCAT(${keys.join(', ')})`\n  },\n\n  handlePaginationAtRoot: async function(parent, node, context, tables) {\n    const pagingWhereConditions = []\n    if (node.sortKey) {\n      const {\n        limit,\n        order,\n        whereCondition: whereAddendum\n      } = interpretForKeysetPaging(node, dialect)\n      pagingWhereConditions.push(whereAddendum)\n      if (node.where) {\n        pagingWhereConditions.push(\n          await node.where(`${quote(node.as)}`, node.args || {}, context, node)\n        )\n      }\n      tables.push(\n        keysetPagingSelect(\n          node.name,\n          pagingWhereConditions,\n          order,\n          limit,\n          node.as,\n          { q: quote }\n        )\n      )\n    } else if (node.orderBy) {\n      const { limit, offset, order } = interpretForOffsetPaging(node, dialect)\n      if (node.where) {\n        pagingWhereConditions.push(\n          await node.where(`${quote(node.as)}`, node.args || {}, context, node)\n        )\n      }\n      tables.push(\n        offsetPagingSelect(\n          node.name,\n          pagingWhereConditions,\n          order,\n          limit,\n          offset,\n          node.as,\n          { q: quote }\n        )\n      )\n    }\n  },\n\n  handleBatchedOneToManyPaginated: async function(\n    parent,\n    node,\n    context,\n    tables,\n    batchScope\n  ) {\n    const pagingWhereConditions = []\n    if (node.where) {\n      pagingWhereConditions.push(\n        await node.where(`${quote(node.as)}`, node.args || {}, context, node)\n      )\n    }\n    if (node.sortKey) {\n      const {\n        limit,\n        order,\n        whereCondition: whereAddendum\n      } = interpretForKeysetPaging(node, dialect)\n      pagingWhereConditions.push(whereAddendum)\n      const unions = batchScope.map(val => {\n        let whereConditions = [\n          ...pagingWhereConditions,\n          `${quote(node.as)}.${quote(node.sqlBatch.thisKey.name)} = ${val}`\n        ]\n        whereConditions = filter(whereConditions).join(' AND ') || '1'\n        return paginatedSelect(\n          node.name,\n          node.as,\n          whereConditions,\n          order,\n          limit,\n          null\n        )\n      })\n      tables.push(joinUnions(unions, node.as))\n    } else if (node.orderBy) {\n      const { limit, offset, order } = interpretForOffsetPaging(node, dialect)\n      const unions = batchScope.map(val => {\n        let whereConditions = [\n          ...pagingWhereConditions,\n          `${quote(node.as)}.${quote(node.sqlBatch.thisKey.name)} = ${val}`\n        ]\n        whereConditions = filter(whereConditions).join(' AND ') || '1'\n        return paginatedSelect(\n          node.name,\n          node.as,\n          whereConditions,\n          order,\n          limit,\n          offset,\n          { withTotal: true }\n        )\n      })\n      tables.push(joinUnions(unions, node.as))\n    }\n  },\n\n  handleBatchedManyToManyPaginated: async function(\n    parent,\n    node,\n    context,\n    tables,\n    batchScope,\n    joinCondition\n  ) {\n    const pagingWhereConditions = []\n    if (node.junction.where) {\n      pagingWhereConditions.push(\n        await node.junction.where(\n          `${quote(node.junction.as)}`,\n          node.args || {},\n          context,\n          node\n        )\n      )\n    }\n    if (node.where) {\n      pagingWhereConditions.push(\n        await node.where(`${quote(node.as)}`, node.args || {}, context, node)\n      )\n    }\n\n    if (node.where || node.orderBy) {\n      var extraJoin = {\n        name: node.name,\n        as: node.as,\n        condition: joinCondition\n      }\n    }\n    if (node.sortKey || node.junction.sortKey) {\n      const {\n        limit,\n        order,\n        whereCondition: whereAddendum\n      } = interpretForKeysetPaging(node, dialect)\n      pagingWhereConditions.push(whereAddendum)\n      const unions = batchScope.map(val => {\n        let whereConditions = [\n          ...pagingWhereConditions,\n          `${quote(node.junction.as)}.${quote(\n            node.junction.sqlBatch.thisKey.name\n          )} = ${val}`\n        ]\n        whereConditions = filter(whereConditions).join(' AND ') || '1'\n        return paginatedSelect(\n          node.junction.sqlTable,\n          node.junction.as,\n          whereConditions,\n          order,\n          limit,\n          null,\n          { extraJoin }\n        )\n      })\n      tables.push(joinUnions(unions, node.junction.as))\n    } else if (node.orderBy || node.junction.orderBy) {\n      const { limit, offset, order } = interpretForOffsetPaging(node, dialect)\n      const unions = batchScope.map(val => {\n        let whereConditions = [\n          ...pagingWhereConditions,\n          `${quote(node.junction.as)}.${quote(\n            node.junction.sqlBatch.thisKey.name\n          )} = ${val}`\n        ]\n        whereConditions = filter(whereConditions).join(' AND ') || '1'\n        return paginatedSelect(\n          node.junction.sqlTable,\n          node.junction.as,\n          whereConditions,\n          order,\n          limit,\n          offset,\n          {\n            withTotal: true,\n            extraJoin\n          }\n        )\n      })\n      tables.push(joinUnions(unions, node.junction.as))\n    }\n    tables.push(\n      `LEFT JOIN ${node.name} AS ${quote(node.as)} ON ${joinCondition}`\n    )\n  }\n})\n"],"file":"mariadb.js"}