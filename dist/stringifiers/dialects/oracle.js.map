{"version":3,"sources":["../../../src/stringifiers/dialects/oracle.js"],"names":["recursiveConcat","keys","length","slice","q","str","keysetPagingSelect","table","whereCondition","order","limit","as","options","joinCondition","joinType","extraJoin","join","name","condition","columns","offsetPagingSelect","pagingWhereConditions","offset","dialect","module","exports","require","compositeKey","parent","map","key","handlePaginationAtRoot","node","context","tables","sortKey","whereAddendum","push","where","args","orderBy","handleJoinedOneToManyPaginated","sqlJoin","handleJoinedManyToManyPaginated","joinCondition1","joinCondition2","junction","sqlJoins","lateralJoinOptions","sqlTable","handleBatchedOneToManyPaginated","batchScope","sqlBatch","thisKey","arrToTableUnion","lateralJoinCondition","handleBatchedManyToManyPaginated","arr","val"],"mappings":"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","sourcesContent":["import {\n  interpretForOffsetPaging,\n  interpretForKeysetPaging,\n  orderColumnsToString\n} from '../shared'\nimport { filter } from 'lodash'\n\nfunction recursiveConcat(keys) {\n  if (keys.length <= 1) {\n    return keys[0]\n  }\n  return recursiveConcat([`CONCAT(${keys[0]}, ${keys[1]})`, ...keys.slice(2)])\n}\n\nconst q = str => `\"${str}\"`\n\nfunction keysetPagingSelect(\n  table,\n  whereCondition,\n  order,\n  limit,\n  as,\n  options = {}\n) {\n  let { joinCondition, joinType, extraJoin } = options\n  whereCondition = filter(whereCondition).join(' AND ') || '1 = 1'\n  if (joinCondition) {\n    return `\\\n${joinType === 'LEFT' ? 'OUTER' : 'CROSS'} APPLY (\n  SELECT \"${as}\".*\n  FROM ${table} \"${as}\"\n  ${\n    extraJoin\n      ? `LEFT JOIN ${extraJoin.name} ${q(extraJoin.as)}\n    ON ${extraJoin.condition}`\n      : ''\n  }\n  WHERE ${whereCondition}\n  ORDER BY ${orderColumnsToString(order.columns, q, order.table)}\n  FETCH FIRST ${limit} ROWS ONLY\n) ${q(as)}`\n  }\n  return `\\\nFROM (\n  SELECT \"${as}\".*\n  FROM ${table} \"${as}\"\n  WHERE ${whereCondition}\n  ORDER BY ${orderColumnsToString(order.columns, q, order.table)}\n  FETCH FIRST ${limit} ROWS ONLY\n) ${q(as)}`\n}\n\nfunction offsetPagingSelect(\n  table,\n  pagingWhereConditions,\n  order,\n  limit,\n  offset,\n  as,\n  options = {}\n) {\n  let { joinCondition, joinType, extraJoin } = options\n  const whereCondition = filter(pagingWhereConditions).join(' AND ') || '1 = 1'\n  if (joinCondition) {\n    return `\\\n${joinType === 'LEFT' ? 'OUTER' : 'CROSS'} APPLY (\n  SELECT \"${as}\".*, count(*) OVER () AS ${q('$total')}\n  FROM ${table} \"${as}\"\n  ${\n    extraJoin\n      ? `LEFT JOIN ${extraJoin.name} ${q(extraJoin.as)}\n    ON ${extraJoin.condition}`\n      : ''\n  }\n  WHERE ${whereCondition}\n  ORDER BY ${orderColumnsToString(order.columns, q, order.table)}\n  OFFSET ${offset} ROWS FETCH NEXT ${limit} ROWS ONLY\n) ${q(as)}`\n  }\n  return `\\\nFROM (\n  SELECT \"${as}\".*, count(*) OVER () AS ${q('$total')}\n  FROM ${table} \"${as}\"\n  WHERE ${whereCondition}\n  ORDER BY ${orderColumnsToString(order.columns, q, order.table)}\n  OFFSET ${offset} ROWS FETCH NEXT ${limit} ROWS ONLY\n) ${q(as)}`\n}\n\nconst dialect = (module.exports = {\n  ...require('./pg'),\n  name: 'oracle',\n\n  compositeKey(parent, keys) {\n    keys = keys.map(key => `\"${parent}\".\"${key}\"`)\n    return `NULLIF(${recursiveConcat(keys)}, '')`\n  },\n\n  handlePaginationAtRoot: async function(parent, node, context, tables) {\n    const pagingWhereConditions = []\n    if (node.sortKey) {\n      const {\n        limit,\n        order,\n        whereCondition: whereAddendum\n      } = interpretForKeysetPaging(node, dialect)\n      pagingWhereConditions.push(whereAddendum)\n      if (node.where) {\n        pagingWhereConditions.push(\n          await node.where(`\"${node.as}\"`, node.args || {}, context, node)\n        )\n      }\n      tables.push(\n        keysetPagingSelect(\n          node.name,\n          pagingWhereConditions,\n          order,\n          limit,\n          node.as\n        )\n      )\n    } else if (node.orderBy) {\n      const { limit, offset, order } = interpretForOffsetPaging(node, dialect)\n      if (node.where) {\n        pagingWhereConditions.push(\n          await node.where(`\"${node.as}\"`, node.args || {}, context, node)\n        )\n      }\n      tables.push(\n        offsetPagingSelect(\n          node.name,\n          pagingWhereConditions,\n          order,\n          limit,\n          offset,\n          node.as\n        )\n      )\n    }\n  },\n\n  handleJoinedOneToManyPaginated: async function(\n    parent,\n    node,\n    context,\n    tables,\n    joinCondition\n  ) {\n    const pagingWhereConditions = [\n      await node.sqlJoin(\n        `\"${parent.as}\"`,\n        q(node.as),\n        node.args || {},\n        context,\n        node\n      )\n    ]\n    if (node.where) {\n      pagingWhereConditions.push(\n        await node.where(`\"${node.as}\"`, node.args || {}, context, node)\n      )\n    }\n\n    // which type of pagination are they using?\n    if (node.sortKey) {\n      const {\n        limit,\n        order,\n        whereCondition: whereAddendum\n      } = interpretForKeysetPaging(node, dialect)\n      pagingWhereConditions.push(whereAddendum)\n      tables.push(\n        keysetPagingSelect(\n          node.name,\n          pagingWhereConditions,\n          order,\n          limit,\n          node.as,\n          {\n            joinCondition,\n            joinType: 'LEFT'\n          }\n        )\n      )\n    } else if (node.orderBy) {\n      const { limit, offset, order } = interpretForOffsetPaging(node, dialect)\n      tables.push(\n        offsetPagingSelect(\n          node.name,\n          pagingWhereConditions,\n          order,\n          limit,\n          offset,\n          node.as,\n          {\n            joinCondition,\n            joinType: 'LEFT'\n          }\n        )\n      )\n    }\n  },\n\n  handleJoinedManyToManyPaginated: async function(\n    parent,\n    node,\n    context,\n    tables,\n    joinCondition1,\n    joinCondition2\n  ) {\n    const pagingWhereConditions = [\n      await node.junction.sqlJoins[0](\n        `\"${parent.as}\"`,\n        `\"${node.junction.as}\"`,\n        node.args || {},\n        context,\n        node\n      )\n    ]\n    if (node.junction.where) {\n      pagingWhereConditions.push(\n        await node.junction.where(\n          `\"${node.junction.as}\"`,\n          node.args || {},\n          context,\n          node\n        )\n      )\n    }\n    if (node.where) {\n      pagingWhereConditions.push(\n        await node.where(`\"${node.as}\"`, node.args || {}, context, node)\n      )\n    }\n\n    const lateralJoinOptions = {\n      joinCondition: joinCondition1,\n      joinType: 'LEFT'\n    }\n    if (node.where || node.orderBy) {\n      lateralJoinOptions.extraJoin = {\n        name: node.name,\n        as: node.as,\n        condition: joinCondition2\n      }\n    }\n    if (node.sortKey || node.junction.sortKey) {\n      const {\n        limit,\n        order,\n        whereCondition: whereAddendum\n      } = interpretForKeysetPaging(node, dialect)\n      pagingWhereConditions.push(whereAddendum)\n      tables.push(\n        keysetPagingSelect(\n          node.junction.sqlTable,\n          pagingWhereConditions,\n          order,\n          limit,\n          node.junction.as,\n          lateralJoinOptions\n        )\n      )\n    } else if (node.orderBy || node.junction.orderBy) {\n      const { limit, offset, order } = interpretForOffsetPaging(node, dialect)\n      tables.push(\n        offsetPagingSelect(\n          node.junction.sqlTable,\n          pagingWhereConditions,\n          order,\n          limit,\n          offset,\n          node.junction.as,\n          lateralJoinOptions\n        )\n      )\n    }\n  },\n\n  handleBatchedOneToManyPaginated: async function(\n    parent,\n    node,\n    context,\n    tables,\n    batchScope\n  ) {\n    const pagingWhereConditions = [\n      `\"${node.as}\".\"${node.sqlBatch.thisKey.name}\" = \"temp\".\"value\"`\n    ]\n    if (node.where) {\n      pagingWhereConditions.push(\n        await node.where(`\"${node.as}\"`, node.args || {}, context, node)\n      )\n    }\n    tables.push(`FROM (${arrToTableUnion(batchScope)}) \"temp\"`)\n    const lateralJoinCondition = `\"${node.as}\".\"${node.sqlBatch.thisKey.name}\" = \"temp\".\"value\"`\n    if (node.sortKey) {\n      const {\n        limit,\n        order,\n        whereCondition: whereAddendum\n      } = interpretForKeysetPaging(node, dialect)\n      pagingWhereConditions.push(whereAddendum)\n      tables.push(\n        keysetPagingSelect(\n          node.name,\n          pagingWhereConditions,\n          order,\n          limit,\n          node.as,\n          { joinCondition: lateralJoinCondition }\n        )\n      )\n    } else if (node.orderBy) {\n      const { limit, offset, order } = interpretForOffsetPaging(node, dialect)\n      tables.push(\n        offsetPagingSelect(\n          node.name,\n          pagingWhereConditions,\n          order,\n          limit,\n          offset,\n          node.as,\n          {\n            joinCondition: lateralJoinCondition\n          }\n        )\n      )\n    }\n  },\n\n  handleBatchedManyToManyPaginated: async function(\n    parent,\n    node,\n    context,\n    tables,\n    batchScope,\n    joinCondition\n  ) {\n    const pagingWhereConditions = [\n      `\"${node.junction.as}\".\"${node.junction.sqlBatch.thisKey.name}\" = \"temp\".\"value\"`\n    ]\n    if (node.junction.where) {\n      pagingWhereConditions.push(\n        await node.junction.where(\n          `\"${node.junction.as}\"`,\n          node.args || {},\n          context,\n          node\n        )\n      )\n    }\n    if (node.where) {\n      pagingWhereConditions.push(\n        await node.where(`\"${node.as}\"`, node.args || {}, context, node)\n      )\n    }\n\n    tables.push(`FROM (${arrToTableUnion(batchScope)}) \"temp\"`)\n    const lateralJoinCondition = `\"${node.junction.as}\".\"${node.junction.sqlBatch.thisKey.name}\" = \"temp\".\"value\"`\n\n    const lateralJoinOptions = {\n      joinCondition: lateralJoinCondition,\n      joinType: 'LEFT'\n    }\n    if (node.where || node.orderBy) {\n      lateralJoinOptions.extraJoin = {\n        name: node.name,\n        as: node.as,\n        condition: joinCondition\n      }\n    }\n    if (node.sortKey || node.junction.sortKey) {\n      const {\n        limit,\n        order,\n        whereCondition: whereAddendum\n      } = interpretForKeysetPaging(node, dialect)\n      pagingWhereConditions.push(whereAddendum)\n      tables.push(\n        keysetPagingSelect(\n          node.junction.sqlTable,\n          pagingWhereConditions,\n          order,\n          limit,\n          node.junction.as,\n          lateralJoinOptions\n        )\n      )\n    } else if (node.orderBy || node.junction.orderBy) {\n      const { limit, offset, order } = interpretForOffsetPaging(node, dialect)\n      tables.push(\n        offsetPagingSelect(\n          node.junction.sqlTable,\n          pagingWhereConditions,\n          order,\n          limit,\n          offset,\n          node.junction.as,\n          lateralJoinOptions\n        )\n      )\n    }\n    tables.push(`LEFT JOIN ${node.name} \"${node.as}\" ON ${joinCondition}`)\n  }\n})\n\nfunction arrToTableUnion(arr) {\n  return arr\n    .map(\n      val => `\n  SELECT ${val} AS \"value\" FROM DUAL\n`\n    )\n    .join(' UNION ')\n}\n"],"file":"oracle.js"}