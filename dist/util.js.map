{"version":3,"sources":["../src/util.js"],"names":["debug","require","emphasize","str","colorCode","inspect","obj","options","util","depth","last","arr","length","wrap","maybeArr","constructor","Array","isEmptyArray","val","isArray","ensure","prop","name","Error","unthunk","args","validateSqlAST","topNode","sqlJoin","objToCursor","JSON","stringify","Buffer","from","toString","cursorToObj","cursor","parse","maybeQuote","value","dialectName","toSQL","match","replace","hasBackslash","escaped","i","c","getDialectName","dialectModule","dialect","buildWhereFunction","type","condition","quote","includes","uniqueKey","_typeConfig","assert","equal","table","map","key","join","handleUserDbCall","dbCall","sql","sqlAST","shapeDefinition","Promise","resolve","reject","err","rows","validate","enabled","slice","data","result","then","compileSqlAST","context"],"mappings":"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","sourcesContent":["import util from 'util'\nimport assert from 'assert'\nimport { nest } from '@stem/nesthydrationjs'\nimport stringifySQL from './stringifiers/dispatcher'\nimport resolveUnions from './resolve-unions'\nimport deprecate from 'deprecate'\nconst debug = require('debug')('join-monster')\n\nimport defineObjectShape from './define-object-shape'\n\nexport function emphasize(str, colorCode = 33) {\n  return `\\n\\x1b[1;${colorCode}m${str}\\x1b[0m\\n`\n}\n\nexport function inspect(obj, options = {}) {\n  return util.inspect(obj, { depth: 12, ...options })\n}\n\n// really? yes, really\nexport function last(arr) {\n  return arr[arr.length - 1]\n}\n\nexport function wrap(maybeArr) {\n  if (maybeArr.constructor === Array) {\n    return maybeArr\n  }\n  return [maybeArr]\n}\n\nexport function isEmptyArray(val) {\n  return Array.isArray(val) && val.length === 0\n}\n\nexport function ensure(obj, prop, name) {\n  if (!obj[prop]) {\n    throw new Error(\n      `property \"${prop}\" must be defined on object: ${name ||\n        util.inspect(obj)}`\n    )\n  }\n  return obj[prop]\n}\n\nexport function unthunk(val, ...args) {\n  return typeof val === 'function' ? val(...args) : val\n}\n\nexport function validateSqlAST(topNode) {\n  // TODO: this could be a bit more comprehensive\n  assert(topNode.sqlJoin == null, 'root level field can not have \"sqlJoin\"')\n}\n\nexport function objToCursor(obj) {\n  const str = JSON.stringify(obj)\n  return Buffer.from(str).toString('base64')\n}\n\nexport function cursorToObj(cursor) {\n  const str = Buffer.from(cursor, 'base64').toString()\n  return JSON.parse(str)\n}\n\n// wrap in a pair of single quotes for the SQL if needed\nexport function maybeQuote(value, dialectName) {\n  if (value == null) {\n    return 'NULL'\n  }\n\n  if (typeof value === 'number') return value\n  if (value && typeof value.toSQL === 'function') return value.toSQL()\n  if (\n    value instanceof Buffer &&\n    typeof value === 'object' &&\n    typeof value.toString === 'function'\n  ) {\n    return `X'${value.toString('hex')}'`\n  }\n  if (\n    dialectName === 'oracle' &&\n    value.match(/\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(.\\d+)?Z?/)\n  ) {\n    return value.replace(\n      /(\\d{4}-\\d\\d-\\d\\d)T(\\d\\d:\\d\\d:\\d\\d)(.\\d+)?Z?/,\n      \"TIMESTAMP '$1 $2$3 UTC'\"\n    )\n  }\n\n  // Picked from https://github.com/brianc/node-postgres/blob/876018/lib/client.js#L235..L260\n  // Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\n  let hasBackslash = false\n  let escaped = \"'\"\n\n  for (let i = 0; i < value.length; i++) {\n    let c = value[i]\n    if (c === \"'\") {\n      escaped += c + c\n    } else if (c === '\\\\') {\n      escaped += c + c\n      hasBackslash = true\n    } else {\n      escaped += c\n    }\n  }\n\n  escaped += \"'\"\n\n  if (hasBackslash === true) {\n    escaped = ' E' + escaped\n  }\n\n  return escaped\n}\n\nfunction getDialectName(options) {\n  if (options.dialectModule) {\n    return options.dialectModule.name\n  }\n  return options.dialect || 'sqlite3'\n}\n\nexport function buildWhereFunction(type, condition, options) {\n  const name = getDialectName(options)\n  if (typeof condition === 'function') {\n    return condition\n    // otherwise, we'll assume they gave us the value(s) of the unique key.\n  }\n  // determine the type of quotes necessary to escape the uniqueKey column\n  const quote = ['mysql', 'mysql8', 'mariadb'].includes(name) ? '`' : '\"'\n\n  // determine the unique key so we know what to search by\n  const uniqueKey = type._typeConfig.uniqueKey\n\n  // handle composite keys\n  if (Array.isArray(uniqueKey)) {\n    // it must have a corresponding array of values\n    assert.equal(\n      condition.length,\n      uniqueKey.length,\n      `The unique key for the \"${type.name}\" type is a composite. You must provide an array of values for each column.`\n    )\n    return table =>\n      uniqueKey\n        .map(\n          (key, i) =>\n            `${table}.${quote}${key}${quote} = ${maybeQuote(condition[i])}`\n        )\n        .join(' AND ')\n    // single keys are simple\n  }\n  return table =>\n    `${table}.${quote}${uniqueKey}${quote} = ${maybeQuote(condition)}`\n}\n\n// handles the different callback signatures and return values.\nexport function handleUserDbCall(dbCall, sql, sqlAST, shapeDefinition) {\n  // if there are two args, we're in \"callback mode\"\n  if (dbCall.length === 2) {\n    // wrap it in a promise\n    return new Promise((resolve, reject) => {\n      // wait for them to call \"done\"\n      dbCall(sql, (err, rows) => {\n        if (err) {\n          reject(err)\n        } else {\n          rows = validate(rows)\n          if (debug.enabled) {\n            debug(emphasize('RAW_DATA'), inspect(rows.slice(0, 8)))\n            debug(`${rows.length} rows...`)\n          }\n          const data = nest(rows, shapeDefinition)\n          resolveUnions(data, sqlAST)\n          if (debug.enabled) {\n            debug(emphasize('SHAPED_DATA', inspect(data)))\n          }\n          resolve(data)\n        }\n      })\n    })\n  }\n\n  // otherwise, we are expecting a promise of the data\n  const result = dbCall(sql)\n  if (typeof result.then === 'function') {\n    return result.then(rows => {\n      rows = validate(rows)\n      if (debug.enabled) {\n        debug(emphasize('RAW DATA'), inspect(rows.slice(0, 8)))\n        debug(`${rows.length} rows...`)\n      }\n      // hydrate the data\n      // take that shape definition we produced and pass it to the NestHydrationJS library\n      const data = nest(rows, shapeDefinition)\n      resolveUnions(data, sqlAST)\n      if (debug.enabled) {\n        debug(emphasize('SHAPED_DATA'), inspect(data))\n      }\n      return data\n    })\n  }\n  throw new Error('must return a promise of the data or use the callback')\n}\n\n// validate the data they gave us\nfunction validate(rows) {\n  // its supposed to be an array of objects\n  if (Array.isArray(rows)) return rows\n  // a check for the most common error. a lot of ORMs return an object with the desired data on the `rows` property\n  if (rows && rows.rows) return rows.rows\n\n  throw new Error(\n    `\"dbCall\" function must return/resolve an array of objects where each object is a row from the result set.\n    Instead got ${util.inspect(rows, { depth: 3 })}`\n  )\n}\n\nexport async function compileSqlAST(sqlAST, context, options) {\n  if (debug.enabled) {\n    debug(emphasize('SQL_AST'), inspect(sqlAST))\n  }\n\n  // now convert the \"SQL AST\" to sql\n  options.dialect = options.dialect || 'sqlite3'\n  if (options.dialect === 'standard') {\n    deprecate(\n      'dialect \"standard\" is deprecated, because there is no true implementation of the SQL standard',\n      '\"sqlite3\" is the default'\n    )\n    options.dialect = 'sqlite3'\n  }\n  const sql = await stringifySQL(sqlAST, context, options)\n  if (debug.enabled) {\n    debug(emphasize('SQL'), sql)\n  }\n\n  // figure out the shape of the object and define it so later we can pass it to\n  // NestHydration library so it can hydrate the data\n  const shapeDefinition = defineObjectShape(sqlAST)\n  if (debug.enabled) {\n    debug(emphasize('SHAPE_DEFINITION'), inspect(shapeDefinition))\n  }\n  return { sql, shapeDefinition }\n}\n"],"file":"util.js"}